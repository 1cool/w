{{ define "service_entity" }}
package service

import (
    "{{ .InternalDir }}/ent"
    "{{ .InternalDir }}/repository"
    "context"
)

type {{ .SnakeName | LowerCamel }}Service struct {
    repo repository.{{ .SnakeName | CaseName }}Repository
}

// {{ .SnakeName | CaseName }}Service statement service's abilities.
// the function's name use Camel-Case define should be like this:
// the filename prefix and the action suffix.
type {{ .SnakeName | CaseName }}Service interface {
    Add{{ .SnakeName | CaseName }} (ctx context.Context, {{ .SnakeName | LowerCamel }} request.{{ .SnakeName | CaseName }}Add) (response.{{ .SnakeName | CaseName }}Add, error)
    Update{{ .SnakeName | CaseName }} (ctx context.Context, id int, {{ .SnakeName | LowerCamel }} request.{{ .SnakeName | CaseName }}Update) (int, error)
    List{{ .SnakeName | CaseName }} (ctx context.Context, offset, limit int) ([]response.{{ .SnakeName | CaseName }}List, error)
    Show{{ .SnakeName | CaseName }} (ctx context.Context, id int) (response.{{ .SnakeName | CaseName }}, error)
    Delete{{ .SnakeName | CaseName }} (ctx context.Context, id int) (int, error)

    // InjectInterface
}

func new{{ .SnakeName | CaseName }}Service (repo repository.{{ .SnakeName | CaseName }}Repository) {{ .SnakeName | CaseName }}Service {
    return &{{ .SnakeName | LowerCamel }}Service{
        repo: repo,
    }
}

func (srv *{{ .SnakeName | LowerCamel }}Service) Add{{ .SnakeName | CaseName }} (ctx context.Context, {{ .SnakeName | LowerCamel }} request.{{ .SnakeName | CaseName }}Add) (response.{{ .SnakeName | CaseName }}Add, error) {
     return  srv.repo.Add{{ .SnakeName | CaseName }}(ctx)
 }

func (srv *{{ .SnakeName | LowerCamel }}Service) Update{{ .SnakeName | CaseName }} (ctx context.Context, id int, {{ .LowerCamelName | FirstLetter}} request.{{ .SnakeName | CaseName }}Update) (int, error) {
     return srv.repo.Update{{ .SnakeName | CaseName }}(ctx)
}

func (srv *{{ .SnakeName | LowerCamel }}Service) List{{ .SnakeName | CaseName }} (ctx context.Context, offset, limit int) ([]response.{{ .SnakeName | CaseName }}List, error) {
     return srv.repo.List{{ .SnakeName | CaseName }}(ctx)
}

func (srv *{{ .SnakeName | LowerCamel }}Service) Show{{ .SnakeName | CaseName }} (ctx context.Context, id int) (response.{{ .SnakeName | CaseName }}, error) {
     return srv.repo.Show{{ .SnakeName | CaseName }}(ctx)
}

func (srv *{{ .SnakeName | LowerCamel }}Service) Delete{{ .SnakeName | CaseName }} (ctx context.Context, id int) (int, error) {
       return srv.repo.Delete{{ .SnakeName | CaseName }}(ctx)
}

 // InjectInterfaceImpl
{{ end }}

{{ define "service_interface" }}
    New{{ .SnakeName | CaseName }}Service() {{ .SnakeName | CaseName }}Service
    // InjectInterface
{{end}}

{{ define "service_interface_impl" }}
func (srv *service) New{{ .SnakeName | CaseName }}Service() {{ .SnakeName | CaseName }}Service {
    return new{{ .SnakeName | CaseName }}Service(srv.repo.New{{ .SnakeName | CaseName }}Repository())
}

// InjectInterfaceImpl
{{end}}

{{ define "service" }}
package service

import (
    "{{ .InternalDir | ToSlash }}/repository"
)

type service struct {
   repo repository.IRepository
}

// IService statement service's abilities.
// the function's name use Camel-Case define should be like this:
// the filename prefix and the action suffix.
type IService interface {
    // InjectInterface
}

func New(repository repository.IRepository) IService {
	return &service{
		repo: repository,
	}
}

// InjectInterfaceImpl
{{end}}