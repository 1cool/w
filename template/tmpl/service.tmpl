{{ define "service_entity" }}
package service

import (
    "{{.Module }}/{{ .InternalDir }}/ent"
    "{{.Module }}/{{ .InternalDir }}/repository"
    "context"
)

type {{ .LowerCamelName }}Service struct {
    repo repository.{{ .CamelName }}Repository
}

// {{ .CamelName }}Service statement service's abilities.
// the function's name use Camel-Case define should be like this:
// the filename prefix and the action suffix.
type {{ .CamelName }}Service interface {
    Add{{ .CamelName }} (ctx context.Context, {{ .LowerCamelName }} ent.{{ .CamelName }}) (*ent.{{ .CamelName }}, error)
    Update{{ .CamelName }} (ctx context.Context, id int, {{ .LowerCamelName }} ent.{{ .CamelName }}) (int, error)
    List{{ .CamelName }} (ctx context.Context, offset, limit int) (int, []*ent.{{ .CamelName }}, error)
    Show{{ .CamelName }} (ctx context.Context, id int) (*ent.{{ .CamelName }}, error)
    Delete{{ .CamelName }} (ctx context.Context, id int) (int, error)

    // {{ .InjectInterface }}
}

func new{{ .CamelName }}Service (repo repository.{{ .CamelName }}Repository) {{ .CamelName }}Service {
    return &{{ .LowerCamelName }}Service{
        repo: repo,
    }
}

func (srv *{{ .LowerCamelName }}Service) Add{{ .CamelName }} (ctx context.Context, {{ .LowerCamelName }} ent.{{ .CamelName }}) (*ent.{{ .CamelName }}, error) {
     return  srv.repo.Add{{ .CamelName }}(ctx)
 }

func (srv *{{ .LowerCamelName }}Service) Update{{ .CamelName }} (ctx context.Context, id int, {{ .LowerCamelName | FirstLetter}} ent.{{ .CamelName }}) (int, error) {
     return srv.repo.Update{{ .CamelName }}(ctx)
}

func (srv *{{ .LowerCamelName }}Service) List{{ .CamelName }} (ctx context.Context, offset, limit int) (int, []*ent.{{ .CamelName }}, error) {
     return srv.repo.List{{ .CamelName }}(ctx)
}

func (srv *{{ .LowerCamelName }}Service) Show{{ .CamelName }} (ctx context.Context, id int) (*ent.{{ .CamelName }}, error) {
     return srv.repo.Show{{ .CamelName }}(ctx)
}

func (srv *{{ .LowerCamelName }}Service) Delete{{ .CamelName }} (ctx context.Context, id int) (int, error) {
       return srv.repo.Delete{{ .CamelName }}(ctx)
}

 // {{ .InjectInterfaceImpl }}
{{ end }}

{{ define "service_interface" }}
    New{{ .CamelName }}Service() {{ .CamelName }}Service
    // {{ .InjectInterface }}
{{end}}

{{ define "service_interface_impl" }}
func (srv *service) New{{ .CamelName }}Service() {{ .CamelName }}Service {
    return new{{ .CamelName }}Service(srv.repo.New{{ .CamelName }}Repository())
}

// {{ .InjectInterfaceImpl }}
{{end}}

{{ define "service" }}
package service

import (
    "{{ .InternalDir | ToSlash }}/repository"
)

type service struct {
   repo repository.IRepository
}

// IService statement service's abilities.
// the function's name use Camel-Case define should be like this:
// the filename prefix and the action suffix.
type IService interface {
    // {{ .InjectInterface }}
}

func New(repository repository.IRepository) IService {
	return &service{
		repo: repository,
	}
}

// {{ .InjectInterfaceImpl }}
{{end}}